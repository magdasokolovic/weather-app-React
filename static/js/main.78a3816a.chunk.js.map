{"version":3,"sources":["App.js","WeatherDataComponent.js","index.js"],"names":["console","log","process","apiKey","App","state","cityName","weatherData","getUserCity","e","setState","target","value","formSubmission","preventDefault","trim","fetchWeatherData","city","fetch","then","response","json","data","name","catch","err","componentDidMount","this","className","onSubmit","type","placeholder","onChange","temp","main","maxTemp","temp_max","minTemp","temp_min","humidity","feelsLike","feels_like","icon","weather","Component","WeatherDataComponent","nextProps","nextState","props","src","alt","reactDOM","render","document","getElementById"],"mappings":"wNAIAA,QAAQC,IAAIC,GACZ,IAAIC,EAAS,mCAEQC,E,4MACnBC,MAAM,CACJC,SAAU,GACVC,YAAa,M,EAGfC,YAAc,SAACC,GACb,EAAKC,SAAS,CACZJ,SAAUG,EAAEE,OAAOC,S,EAIvBC,eAAiB,SAACJ,GAEhBA,EAAEK,iBAEFd,QAAQC,IAAI,EAAKI,MAAMC,UAEY,KAA/B,EAAKD,MAAMC,SAASS,QACtB,EAAKC,iBAAiB,EAAKX,MAAMC,W,EAKrCU,iBAAmB,SAACC,GAElBC,MAAM,qDAAD,OAAsDD,EAAtD,kBAAoEd,EAApE,kBAEJgB,MAAK,SAAAC,GAAQ,OAAEA,EAASC,UACxBF,MAAK,SAAAG,GAAI,OACR,EAAKZ,SAAS,CACZH,YAAae,EACbhB,SAAUgB,EAAKC,UAElBC,OAAM,SAAAC,GAAG,OAAIzB,QAAQC,IAAIwB,O,EAG5BC,kBAAoB,WAGlB,EAAKV,iBAAiB,Y,4CAGtB,WACEhB,QAAQC,IAAI0B,KAAKtB,MAAME,aACvB,IAAIe,EAAOK,KAAKtB,MAAME,YACtB,OACE,yBAAKqB,UAAU,aACb,2CACA,0BAAMC,SAAUF,KAAKd,gBACnB,2BAAOiB,KAAK,OAAOC,YAAY,kBAAkBC,SAAUL,KAAKnB,cAChE,qDAGDc,GAAQ,kBAAC,IAAD,CACPL,KAAMU,KAAKtB,MAAMC,SACjB2B,KAAMX,EAAKY,KAAKD,KAChBE,QAASb,EAAKY,KAAKE,SACnBC,QAASf,EAAKY,KAAKI,SACnBC,SAAUjB,EAAKY,KAAKK,SACpBC,UAAWlB,EAAKY,KAAKO,WACrBC,KAAMpB,EAAKqB,QAAQ,GAAGD,Y,GA7DDE,e,iICLZC,E,2KACjB,SAAsBC,EAAWC,GAE7B,OAAID,EAAU7B,OAASU,KAAKqB,MAAM/B,MAAQ6B,EAAUb,OAASN,KAAKqB,MAAMf,O,oBAM5E,WAEI,OADAjC,QAAQC,IAAI,iCAER,6BACI,0CAAgB0B,KAAKqB,MAAMR,UAA3B,SACA,oCAAUb,KAAKqB,MAAM/B,MACrB,yBAAKgC,IAAG,4CAAuCtB,KAAKqB,MAAMN,KAAlD,WACRQ,IAAI,iBAEJ,6BACI,oDAA0BvB,KAAKqB,MAAMf,KAArC,UAGJ,6BACI,uCAAaN,KAAKqB,MAAMT,UACxB,2CAAiBZ,KAAKqB,MAAMR,UAA5B,SACA,8CAAoBb,KAAKqB,MAAMb,QAA/B,SACA,8CAAoBR,KAAKqB,MAAMX,QAA/B,e,GA1B8BO,c,+DCDlD,gDAIAO,EAASC,OAAO,kBAAC,IAAD,MAAOC,SAASC,eAAe,U","file":"static/js/main.78a3816a.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport './App.css';\nimport WeatherDataComponent from './WeatherDataComponent';\n\nconsole.log(process)\nlet apiKey = 'd0a3833f5778ca65ca346206e8e3534f'\n\nexport default class App extends Component {\n  state={\n    cityName: '',\n    weatherData: null\n  }\n\n  getUserCity = (e) => {\n    this.setState({\n      cityName: e.target.value\n    })\n  }\n\n  formSubmission = (e) => {\n    // prevent default behaviour of the form:\n    e.preventDefault()\n\n    console.log(this.state.cityName)\n\n    if (this.state.cityName.trim() !== '') {\n      this.fetchWeatherData(this.state.cityName)\n\n    }\n  }\n\n  fetchWeatherData = (city) => {\n    // injecting dinamic data with template literals:\n    fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${apiKey}&units=metric`)\n\n    .then(response=>response.json())\n    .then(data => \n      this.setState({\n        weatherData: data, \n        cityName: data.name\n      }))\n    .catch(err => console.log(err))\n  }\n\n  componentDidMount = () => {\n    // it is just like onLoad\n    // we have to fetch data\n    this.fetchWeatherData('Vilnius')\n  }\n\n    render() {\n      console.log(this.state.weatherData)\n      let data = this.state.weatherData\n      return (\n        <div className=\"container\">\n          <h1>Weather App</h1>\n          <form onSubmit={this.formSubmission}>\n            <input type=\"text\" placeholder=\"Enter your city\" onChange={this.getUserCity}/>\n            <button>Get Weather Data</button>\n          </form>\n\n          {data && <WeatherDataComponent \n            city={this.state.cityName}\n            temp={data.main.temp}\n            maxTemp={data.main.temp_max}\n            minTemp={data.main.temp_min}\n            humidity={data.main.humidity}\n            feelsLike={data.main.feels_like}\n            icon={data.weather[0].icon}\n          />}\n        </div>\n      )\n    }\n  \n}\n","import React, { Component } from 'react'\n\nexport default class WeatherDataComponent extends Component {\n    shouldComponentUpdate(nextProps, nextState) {\n        // if updated city is the same as previous city name, don't re-render this component\n        if (nextProps.city === this.props.city && nextProps.temp === this.props.temp) {\n            return false;\n        }\n        return true;\n    }\n\n    render() {\n        console.log('render from Weather component');\n        return (\n            <div>\n                <p>Feels like: {this.props.feelsLike}&deg;C</p>\n                <p>City: {this.props.city}</p>\n                <img src={`https://openweathermap.org/img/wn/${this.props.icon}@4x.png`} \n                alt=\"weather icon\"/>\n\n                <div>\n                    <h1>Current temperature: {this.props.temp}&deg;C</h1>\n                </div>\n\n                <div>\n                    <p>humidity:{this.props.humidity}</p>\n                    <p>feeels like: {this.props.feelsLike}&deg;C</p>\n                    <p>max temperature:{this.props.maxTemp}&deg;C</p>\n                    <p>min temperature:{this.props.minTemp}&deg;C</p>\n                </div>\n            </div>\n        )\n    }\n}\n","\nimport React from \"react\"\nimport App from \"./App.js\"\nimport reactDOM from \"react-dom\"\n\nreactDOM.render(<App/>,document.getElementById(\"root\"))"],"sourceRoot":""}